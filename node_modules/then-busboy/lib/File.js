"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFile = exports.default = void 0;

var _path = require("path");

var _fs = require("fs");

var _invariant = _interopRequireDefault(require("@octetstream/invariant"));

var _isPlainObject = _interopRequireDefault(require("./util/isPlainObject"));

var _isString = _interopRequireDefault(require("./util/isString"));

var _getType = _interopRequireDefault(require("./util/getType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class File {
  /**
   * File class.
   *
   * @param {object} options
   *
   * @constructor
   *
   * @api public
   */
  constructor(options) {
    (0, _invariant.default)(!(0, _isPlainObject.default)(options), TypeError, "File options should be a plain object. Received", (0, _getType.default)(options));
    const {
      path,
      enc,
      mime,
      originalFilename
    } = options;
    (0, _invariant.default)(!path, "Filename required.");
    (0, _invariant.default)(!(0, _isString.default)(path), TypeError, "Filename should be a string. Received %s", (0, _getType.default)(path));
    (0, _invariant.default)(!enc, "File encoding required.");
    (0, _invariant.default)(!(0, _isString.default)(enc), TypeError, "File encoding should be a string. Received %s", (0, _getType.default)(enc));
    (0, _invariant.default)(!mime, "File mime type required.");
    (0, _invariant.default)(!(0, _isString.default)(mime), TypeError, "File mime type should be a string. Received %s", (0, _getType.default)(mime));
    const ext = (0, _path.extname)(path);
    const base = (0, _path.basename)(path, ext);
    this.__stream = (0, _fs.createReadStream)(path);
    this.originalFilename = (0, _path.basename)(originalFilename);
    this.filename = (0, _path.basename)(path);
    this.basename = base;
    this.extname = ext;
    this.mime = mime;
    this.enc = enc;
    this.path = path;
    this.toJSON = this.toJSON.bind(this);
    this.inspect = this.inspect.bind(this);
  }

  stream() {
    return this.__stream;
  }

  get [Symbol.toStringTag]() {
    return `File: ${this.filename}`;
  }

  toJSON() {
    return `[File: ${this.filename}]`;
  }

  toString() {
    return `[File: ${this.filename}]`;
  }

  inspect() {
    return `[File: ${this.filename}]`;
  }

}

var _default = File;
exports.default = _default;
const isFile = File.isFile;
exports.isFile = isFile;